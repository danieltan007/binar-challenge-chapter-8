{
	"openapi": "3.0.3",
	"info": {
		"title": "Swagger Petstore - OpenAPI 3.0",
		"description": "this project created with react bootstrap and express js\n\n\nSome useful links:\n- [Daniel Tan repository](https://github.com/danieltan007/binar-challenge-chapter-8)\n- [API Source](https://github.com/berbinarbinar/binar-challenge-chapter-8)",
		"contact": {
			"email": "capricondaniel@gmail.com"
		},
		"license": {
			"name": "Apache 2.0",
			"url": "http://www.apache.org/licenses/LICENSE-2.0.html"
		},
		"version": "1.0.11"
	},
	"externalDocs": {
		"description": "Find out more about Swagger",
		"url": "http://swagger.io"
	},
	"servers": [
		{
			"url": "http://localhost:4000/api/v1"
		}
	],
	"tags": [
		{
			"name": "player",
			"description": "Everything about Players"
		}
	],
	"paths": {
		"/players": {
			"tags": [
				"player"
			],
			"get": {
				"summary": "Get all players",
				"description": "Get all players in the database",
				"operationId": "getAllPlayers",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/Player"
									}
								}
							},
							"application/xml": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/Player"
									}
								}
							}
						}
					},
					"404": {
						"description": "no players"
					}
				}
			},
			"post": {
				"tags": [
					"player"
				],
				"summary": "Add a new player to the database",
				"description": "Add a new player to the database",
				"operationId": "addPlayer",
				"requestBody": {
					"description": "Create a new player in the database",
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Player"
							}
						},
						"application/xml": {
							"schema": {
								"$ref": "#/components/schemas/Player"
							}
						},
						"application/x-www-form-urlencoded": {
							"schema": {
								"$ref": "#/components/schemas/Player"
							}
						}
					},
					"required": true
				},
				"responses": {
					"201": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Player"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/Player"
								}
							}
						}
					},
					"400": {
						"description": "Username or Passwrod cannot be empty"
					}
				}
			}
		},
		"/players/{id}": {
			"put": {
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "player id",
						"required": true,
						"schema": {
							"type": "integer",
							"minimum": 1
						}
					}
				],
				"tags": [
					"player"
				],
				"summary": "Update an existing player by id",
				"description": "Update an existing player by Id",
				"operationId": "updatePlayer",
				"requestBody": {
					"description": "Update an existent player in the database",
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Player"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"description": "Player with id successfully updated",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Player"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/Player"
								}
							}
						}
					},
					"500": {
						"description": "failed to update"
					},
					"404" : {
						"description" : "Player not found"
					}
				}
			},
			"get": {
				"tags": [
					"player"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "player id",
						"required": true,
						"schema": {
							"type": "integer",
							"minimum": 1
						}
					}
				],
				"summary": "get player based on Id",
				"description": "get player based on Id",
				"operationId": "getPlayerById",
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Player"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/Player"
								}
							}
						}
					},
					"404": {
						"description": "Player not found or empty"
					}
				}
			},
			"delete": {
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "player id",
						"required": true,
						"schema": {
							"type": "integer",
							"minimum": 1
						}
					}
				],
				"tags": [
					"player"
				],
				"summary": "Deletes a Player",
				"description": "delete a Player",
				"operationId": "deletePlayer",
				"responses": {
					"400": {
						"description": "Cannot delete Player with id. Maybe Player was not found!"
					},
					"404": {
						"description": "Player not found"
					}
				}
			}
		},
		"/players/exp/{id}": {
			"post": {
				"tags": [
					"player"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "player id",
						"required": true,
						"schema": {
							"type": "integer",
							"minimum": 1
						}
					}
				],
				"summary": "update player experience based on player id",
				"description": "update player experience based on player id",
				"operationId": "updateExpById",
				"requestBody": {
						"description": "input exp",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Player"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/Player"
								}
							},
							"application/x-www-form-urlencoded": {
								"schema": {
									"$ref": "#/components/schemas/Player"
								}
							}
						},
						"required": true
					},
				"responses": {
					"200": {
						"description": "success",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/Player"
									}
								}
							}
						}
					},
					"400": {
						"description": "Exp field cannot be empty, or cannot update player with id"
					},
					"404": {
						"description":"Player not found"
					}
				}
			}
		}
},
	"components": {
		"schemas": {
			"Player": {
				"required": [
					"username",
					"password"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"format": "int64",
						"example": 1
					},
					"username": {
						"type": "string",
						"example": "theUser"
					},
					"email": {
						"type": "string",
						"example": "john@email.com"
					},
					"password": {
						"type": "string",
						"example": "12345"
					},
					"experience": {
						"type": "integer",
						"example": 10
					},
					"lvl": {
						"type": "integer",
						"example": 1
					}
				}
			}
		}
	}
}